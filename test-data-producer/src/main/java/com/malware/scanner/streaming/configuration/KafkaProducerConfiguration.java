package com.malware.scanner.streaming.configuration;

import com.malware.scanner.streaming.model.CheckEvent;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;

import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;
import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;
import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;

@Configuration
public class KafkaProducerConfiguration {
    @Value(value = "${spring.kafka.bootstrap-servers}")
    private String bootstrapAddress;
    @Value(value = "${test.topic.read.events.name}")
    private String testTopicName;
    @Value(value = "${test.topic.read.events.partition.count}")
    private int testTopicPartitionCount;
    @Value(value = "${test.topic.read.events.replicas.count}")
    private int testTopicReplicasCount;

    @Bean
    public NewTopic createTopic() {
        return TopicBuilder.name(testTopicName)
                .partitions(testTopicPartitionCount)
                .replicas(testTopicReplicasCount)
                .build();
    }

    @Bean
    public ProducerFactory<String, CheckEvent> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
        configProps.put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, CheckEvent> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }

}
