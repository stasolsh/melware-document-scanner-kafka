package com.malware.scanner.streaming.listener;

import com.malware.scanner.streaming.model.CheckEvent;
import com.malware.scanner.streaming.model.CheckResultEvent;
import com.malware.scanner.streaming.service.MalwareScannerService;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

@Log4j2
@Component
@RequiredArgsConstructor
public class CheckEventListener {
    @Value("${test.topic.write.result.events.name}")
    private String topicWriteVerificationResultsName;
    private final MalwareScannerService malwareScannerService;
    private final KafkaTemplate<String, List<CheckResultEvent>> kafkaTemplate;

    @KafkaListener(
            topics = "${test.topic.read.events.name}",
            groupId = "${consumer.group.id}",
            containerFactory = "kafkaListenerContainerFactory")
    public void checkEventListener(CheckEvent checkEvent) {
        log.info("Entering to CheckEventListener.checkEventListener() called with payload: {}", checkEvent);
        List<CheckResultEvent> results = malwareScannerService.performScan(checkEvent);
        log.info("Scan result {} for the checkEvent {}", results, checkEvent);
        kafkaTemplate.send(topicWriteVerificationResultsName, results);
    }
}
