package com.malware.scanner.streaming.configuration;

import com.malware.scanner.streaming.model.CheckEvent;
import com.malware.scanner.streaming.model.CheckResultEvent;
import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.core.*;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.apache.kafka.clients.CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG;
import static org.apache.kafka.clients.CommonClientConfigs.GROUP_ID_CONFIG;
import static org.apache.kafka.clients.producer.ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG;
import static org.apache.kafka.clients.producer.ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG;

@EnableKafka
@Configuration
public class KafkaPrimeAllConfiguration {
    @Value(value = "${spring.kafka.bootstrap-servers}")
    private String bootstrapAddress;
    @Value(value = "${consumer.group.id}")
    private String consumerGroupId;
    @Value("${test.topic.write.result.events.name}")
    private String topicWriteVerificationResultsName;
    @Value(value = "${test.topic.write.result.partition.count}")
    private int testTopicPartitionCount;
    @Value(value = "${test.topic.write.result.replicas.count}")
    private int testTopicReplicasCount;

    @Bean
    public NewTopic topic() {
        return TopicBuilder.name(topicWriteVerificationResultsName)
                .partitions(testTopicPartitionCount)
                .replicas(testTopicReplicasCount)
                .build();
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, CheckEvent> kafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, CheckEvent> factory = new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }

    private ConsumerFactory<String, CheckEvent> consumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
        props.put(GROUP_ID_CONFIG, consumerGroupId);
        return new DefaultKafkaConsumerFactory<>(props, new StringDeserializer(), new JsonDeserializer<>(CheckEvent.class));
    }

    @Bean
    public ProducerFactory<String, List<CheckResultEvent>> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
        configProps.put(KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, List<CheckResultEvent>> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}
